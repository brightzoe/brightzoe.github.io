<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>brightzoe's blog Blog</title>
        <link>https://brightzoe.top/blog</link>
        <description>brightzoe's blog Blog</description>
        <lastBuildDate>Fri, 05 May 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>版权所有 © 2023 brightzoe's blog</copyright>
        <item>
            <title><![CDATA[为博客添加的自动化工作流]]></title>
            <link>https://brightzoe.top/blog/2023/05/05/automated-workflow</link>
            <guid>https://brightzoe.top/blog/2023/05/05/automated-workflow</guid>
            <pubDate>Fri, 05 May 2023 00:00:00 GMT</pubDate>
            <category>docusaurus</category>
            <category>blog</category>
            <category>github</category>
            <category>vercel</category>
            <category>github actions</category>
        </item>
        <item>
            <title><![CDATA[web 安全]]></title>
            <link>https://brightzoe.top/blog/2022/08/29/web-safety</link>
            <guid>https://brightzoe.top/blog/2022/08/29/web-safety</guid>
            <pubDate>Mon, 29 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[安全世界观]]></description>
            <content:encoded><![CDATA[<h2 id="安全世界观">安全世界观</h2><p>讲安全，需要关注攻击的技术原理，也需要关注防御的思路和实现的技术。</p><p>安全是什么？什么情况下才会产生安全问题？如何看待安全问题？这些是安全的基本问题，需要搞清楚，才能明白一切防御技术的出发点。这也是一个道跟术的问题。</p><p>安全的本质是信任问题。安全方案的设计是建立在信任关系上，比如说要保管重要的文件，我们可以把它锁在抽屉里物理的一把锁，要保证锁的工匠，品牌是值得信任的，没有私自保留额外的钥匙，没有给锁留后门。且锁的钥匙也要在一个不会出问题的地方，或者钥匙交给值得信任的人来保管。如果工匠，品牌不可信任或者钥匙的保管不够安全。我们的决策依据被打破，安全的前提就不再存在。</p><p>安全是一个持续的过程，不能一劳永逸地解决安全问题。任何一种防御技术都不可能永远有效。防御技术在不断的发展，攻击的技术也在动态的发展，二者是相互促进的辩证关系。黑客在不断地研究寻找新的攻击技术，作为防御这也需要不断地跟进，增加对于新的攻击方式的检测与防御方案。</p><h3 id="设计安全方案">设计安全方案</h3><p>安全三要素(作为设计安全方案的出发点)</p><ul><li>机密性。保护数据不能泄露。常见的手段是加密。比如放在加了锁的抽屉里。</li><li>完整性。保护数据内容完整，没有被篡改。常见的技术手段是数字签名，比如 github 可以对每个 commit 进行签名。</li><li>可用性。保护资源在需要的时候都能获得。 典型的破获可用性的例子是 DDOS，服务端拒绝攻击，把可用的端口都占满了，导致无法再提供服务。</li></ul><p>安全评估</p><ul><li><p>目标是什么，要保护什么</p></li><li><p>核心问题是数据安全问题。根据业务内容不同，划分的侧重点也不同，有的公司关心员工的资料信息，有的公司关注客户数据，设计安全方案，需要了解最重要的数据是什么，以及不同数据的重要程度。</p></li></ul><p>最简单的划分信任域和信任边界，从网络逻辑上进行划分。</p><h4 id="威胁分析">威胁分析</h4><p>要把所有的威胁都找出来，一般比较难找，可以采取头脑风暴的形式。也可以采用比较科学的方法，比如使用一个模型帮助我们去想到底有哪些方面可能存在威胁。</p><p>微软提出的威胁建模的方法，我们可以从六个方面去考虑。当然可能存在的威胁有很多，一个威胁到底能造成多大的危害，该怎么衡量，则需要进行风险分析。</p><p>风险 = 发生的可能性 <!-- -->*<!-- --> 破坏潜力（造成的损失大小）</p><p>可以根据风险衡量模型来计算一个威胁的具体风险大小。</p><h3 id="白帽子兵法防御思路">白帽子兵法（防御思路）</h3><ul><li><p>黑名单，白名单原则</p><p>白名单比黑名单安全。但白名单也不是一定安全的。基于白名单的安全方案，也是信任白名单是好的，是安全的，若信任基础不存在，也就谈不上安全。比如浏览器在加载跨域资源的时候，设计的跨域资源共享机制就是通过白名单的思想。设置允许访问的域，允许的请求方法等。</p></li><li><p>最小权限原则。</p><p>只授予必要的权限，而不要过度授权，可以有效减少出错的机会。比如在 Linux 系统中，比较好的操作习惯是用 普通用户操作，只在必要的时候使用 sudo 命令而不是一开始就使用 root 账户，可以最大化降低误操作的风险，在账户被盗用时，造成的影响也会比较低。</p></li><li><p>纵深防御原则</p><p>需要全面防御。在不同的层面，不同的角度对系统做整体的解决方案，将风险分散到系统的各个方面。</p></li><li><p>数据与代码分离的原则。广泛适用于各种由于注入引发的安全问题，原因是混淆了数据与代码的边界。</p></li><li><p>不可预测性原则，攻击方式具有不可预测性。通常利用加密算法，随机数算法等来实现这一条原则。比如防御 CSRF 的时候，通常使用 token 的方式。是因为 token 是足够复杂而且是随机的，无法提前预知。</p></li></ul><h2 id="浏览器安全">浏览器安全</h2><ul><li><p>浏览器具有同源策略。 ----浏览器的安全功能最核心一点。 CORS</p><p>限制跨域的资源，跨域的脚本。跨域：协议，域名，端口。</p><p>CORS 机制（Cross Origin Resource Sharing） 浏览器控制允许访问的资源，通过 HTTP 头来实现。这个跨域访问方案的安全基础是信任“JavaScript 无法控制相应的 http 头”，而只是来自目标域设置的。</p></li><li><p>其他机制：</p><p>浏览器沙箱，以及现代浏览器的多进程架构。浏览器进程，渲染进程，插件进程，扩展进程等。将浏览器的各个功能模块分隔开，各个 tab 页也分隔开，这样其中一个进程崩溃时也不会影响其他的进程。</p><p>恶意网址拦截。比如钓鱼网站，挂马网站，有专门提供恶意网址的组织。</p></li><li><p>XSS</p><p>跨站脚本攻击。通常指通过 HTML 注入 篡改网页，插入恶意的脚本，从而控制浏览器的行为。破坏力强大，场景复杂。</p><ul><li>反射型 用户输入的脚本反射给浏览器，非持久型的 XSS。</li><li>存储型 顾名思义，把用户输入的数据存储在服务器端，XSS 具有很强的稳定性，持久性 XSS。</li><li>DOM based XSS 属于反射型 XSS 的特例，修改页面 DOM 节点形成的 XSS。</li></ul></li><li><p>CSRF</p></li></ul><p>浏览器在用户不知情的情况下进行恶意操作。</p><pre><code>防御：

- 验证码是最简洁有效的。但一定程度上牺牲了用户体验。

- token 根据不可预测性的原则。token 的生成要足够随机的安全函数生成。
- Referrer Check 。检查源是否合法。缺陷在于服务点并不是在所有时候都可以获取到 Referrer。
</code></pre><ul><li><p>点击劫持</p><p>视觉上的欺骗手段。 透明的或者不可见的 iframe 覆盖。用户在不知情的情况下点击透明的 iframe。</p><p>防御：</p><ul><li>禁止 iframe 。iframe 安全性无法保证。</li></ul></li><li><p>HTML5 安全</p></li><li><p>SQL 注入攻击</p></li></ul><h2 id="服务器安全">服务器安全</h2><h3 id="注入攻击">注入攻击</h3><ul><li>sql 注入</li><li>XML 注入等</li></ul><h3 id="文件上传漏洞">文件上传漏洞</h3><p>用户上传了可执行脚本，并通过此脚本获得了执行服务器命令的能力。</p><p>比如 上传了 web 脚本或者上传了 钓鱼图片，或者图片上包含脚本等</p><p>防御：</p><ul><li>文件上传目录设置为不可执行。</li><li>判断文件类型（MIME Type 和后缀检查），推荐使用白名单的方式放行</li><li>单独设置文件服务器的域名</li></ul><h3 id="认证与会话管理">认证与会话管理</h3><p>认证 &amp; 授权 认证是识别用户是谁，授权是为了决定用户能够有执行哪些操作</p><p>认证</p><ul><li>认证 - 实际就是验证凭证的过程。通过凭证数量可以分为单因素认证以及多因素认证。使用多因素认证可以提高攻击的门槛。</li></ul><p>session</p><ul><li><p>用户登录之后，服务端创建的会话，保存用户的状态和相关信息。</p></li><li><p>产生 session 保持攻击等问题。</p><ul><li>利用服务端对于活动的 session 不销毁的特点。攻击者不停发起访问请求，让这个 session 一直存货，成为永久的后门。</li></ul></li></ul><h3 id="访问控制">访问控制</h3><p>垂直权限管理，用户与权限之间的对应关系。 常常使用的 RBAC 基于角色的访问控制。比如 linux 文件系统中的权限管理，针对不同的角色分别设置不用的读写权限。</p><p>水平权限管理，基于数据的访问控制，需要控制数据是否属于当前用户</p><h2 id="加密算法与随机数">加密算法与随机数</h2><p>在系统中对数据进行加密的加密算法和随机数算法的安全性和健壮性关乎整个系统的安全性。</p><h2 id="ddos-分布式拒绝服务">DDOS 分布式拒绝服务</h2><p>本质是利用合理的请求造成资源过载，导致服务不可用。</p><p>网络层 DDOS</p><ul><li>利用 TCP/IP 协议的特征，大量发包。</li><li>有 SYN flood ,UDP flood, ICMP flood 等。</li><li>易于拦截，价值不大。</li></ul><p>应用层 DDOS</p><ul><li><p>大量高频的合法请求，一般是通过代理服务器或者僵尸网络发送，也达到了快速消耗目标主机资源，造成网络堵塞，服务不可用的问题。</p></li><li><p>DNS flood,HTTP 慢连接攻击，CC 攻击等</p></li><li><p>请求合法，很难识别和过滤</p></li></ul><p>防御：</p><ul><li>常见的对抗手段：限制每个 IP 的请求频率。</li></ul><h2 id="web-服务器安全">web 服务器安全</h2><p>应用部署时的运行环境安全。主要关注自身是否安全，以及是否提供了可使用的安全功能。</p><h2 id="安全开发流程">安全开发流程</h2><ul><li>SDL Security Development Lifecycle</li></ul><p>瀑布流开发模型中的安全开发生命周期。但国内的公司一般采用敏捷开发，快速迭代出产品的模式，这套 SDL 模型则显得有些厚重。按照产品的开发周期，分别介绍常用的 SDL 实施方法。</p><p>需求分析与设计阶段</p><ul><li><p>在需求分析阶段，需要了解产品的背景以及需要应对的场景，才能给出相应的建议。</p></li><li><p>需要了解项目中是否包含一些第三方软件，评估第三方软件的安全问题，很多时候入侵是从第三方软件开始的。</p></li></ul><p>开发阶段</p><ul><li>安全是为业务服务。</li><li>力求实现代码上的安全，分析可能出现的漏洞，并在代码上提供可行的解决方案。</li><li>采用代码安全审计工具，将代码审计工作前置，放入代码开发规范中从而减少问题。</li></ul><p>测试阶段</p><ul><li><p>安全测试。独立于代码审计，对于逻辑相对复杂的代码，难以通过代码审计发现。</p><ul><li><p>自动化测试和手动测试。</p><p>自动化测试工具，覆盖性的测试，对项目或产品进行漏洞扫描。</p><p>手动测试。部分设计系统或业务的逻辑无法通过自动化测试完成。以及自动化测试的结果也需要再次确认，因为自动化测试可能存在误报或漏报的问题。</p></li></ul></li></ul>]]></content:encoded>
            <category>reading</category>
            <category>dev</category>
            <category>web</category>
            <category>safety</category>
        </item>
        <item>
            <title><![CDATA[为博客添加评论功能]]></title>
            <link>https://brightzoe.top/blog/2022/06/07/add-comment-system-on-blog</link>
            <guid>https://brightzoe.top/blog/2022/06/07/add-comment-system-on-blog</guid>
            <pubDate>Tue, 07 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[为本博客（docusaurus）添加 disqus 评论系统。]]></description>
            <content:encoded><![CDATA[<p>为本博客（docusaurus）添加 disqus 评论系统。</p><p>首先需要在 disqus 有一个账号，没有需要先<a href="https://disqus.com/">注册</a>。选择 "get started" =&gt;" I want to install Disqus on my site" 。在 disqus 上配置对应的网站信息，配置的 Website Name 就是后面组件中要用到的 shortname。</p><p><img src="https://s2.loli.net/2022/06/20/kTYx62bD4oc5KaP.png"></p><p>disqus 准备好，接下来我们就要在 docusaurus 中去使用了 🐾~</p><h2 id="暴露出要添加部分的组件代码">暴露出要添加部分的组件代码</h2><p>为 blog 功能添加评论，docusaurus 中对应的组件名是 <code>BlogPostPage</code>，我们将它 <code>swizzle</code> 出来。</p><pre><code class="language-bash">yarn swizzle @docusaurus/theme-classic BlogPostPage  --danger
</code></pre><blockquote><p>如果需要 typescript，在 <code>--danger</code> 后面加上 <code>--typescript</code>。</p></blockquote><p><code>swizzle</code> 命令会把当前 theme 的组件代码暴露出来，然后把它们替换到当前项目的目录下。<code>swizzle</code> 命令是有一定风险的，使用前先阅读文档。 <a href="https://docusaurus.io/docs/next/swizzling">Swizzling | Docusaurus</a></p><p><code>swizzle</code> 有两个选项，一个是<code>wrap</code>，一个是<code>eject</code>。<code>wrap</code>是包裹当前的组件，添加一些内容。<code>eject</code>是暴露出当前组件的所有结构，进行一些修改，暴露更彻底，风险更大，如果<code>wrap</code>能满足要求则不必使用<code>eject</code>。</p><p>这里为了调整评论组件的位置，我选择了<code>eject</code> 选项。</p><h2 id="添加对应评论组件">添加对应评论组件</h2><p>当 <code>swizzle</code> 命令执行完毕后，在<code>src/theme/</code>下会多出一个文件名为<code>BlogPostPage</code>。</p><p>需要安装 disqus 对应组件包 <code>disqus-react</code></p><pre><code class="language-bash">yarn add disqus-react
</code></pre><p>在<code>src/theme/BlogPostPage</code>文件中添加如下代码：</p><pre><code class="language-tsx">import {DiscussionEmbed} from "disqus-react";

// BlogPostPageContent 组件中
const {title, description, tags, permalink} = metadata; //docusaurus 暴露出来的
const fmtId = permalink.replace(/^\//, "").replaceAll(/[\s\/]/gi, "-");
const disqusId = fmtId == "" ? "main" : fmtId;

// 在想放置的位置添加DiscussionEmbed组件。一般放在nextItem/prevItem之后。
&lt;DiscussionEmbed
  shortname="yourshortname" //在disqus 配置的
  config={{
    url: "https://brightzoe.top" + permalink, //完整网址
    identifier: disqusId, //识别符
    title: title,
  }}
/&gt;;
</code></pre><h2 id="为-doc-部分添加评论组件">为 doc 部分添加评论组件</h2><p>前面只是为 docusaurus 的 blog 部分添加了评论组件，如果需要为 doc 部分添加评论组件，那就暴露出 doc 部分对应的组件，名字叫做<code>DocItem</code></p><pre><code class="language-bash">yarn swizzle @docusaurus/theme-classic DocItem  --danger
</code></pre><p>同上添加对应<code>DiscussionEmbed</code> 组件即可。</p><h2 id="遇到的问题">遇到的问题</h2><ul><li><p>disqus 不能加载，可能是因为没有配置 disqus 的网址，或者是因为 disqus 的网址配置错误。</p><p>url 不完整。必须完整，例如：<code>https://zoe.me/blog/xx</code></p></li></ul><h2 id="一些可选用的评论系统">一些可选用的评论系统</h2><p>disqus：第三方评论托管系统，用户量大，lazy-loaded。</p><blockquote><p><a href="https://github.com/disqus/disqus-react">disqus/disqus-react: A React component for Disqus</a></p></blockquote><p>gitalk： 开源，利用 GitHub issues，被广泛使用的。</p><blockquote><p><a href="https://github.com/gitalk/gitalk">gitalk/gitalk: Gitalk is a modern comment component based on GitHub Issue and Preact.</a></p></blockquote><p>giscus：开源的，利用 GitHub Discussions。</p><blockquote><p><a href="https://github.com/giscus/giscus">giscus/giscus: A comment system powered by GitHub Discussions.</a></p></blockquote><h2 id="reference">Reference</h2><ul><li><a href="https://docusaurus.io/docs/swizzling#ejecting">Swizzling | Docusaurus</a></li><li><a href="https://madrus4u.com/blog/blog-comments#prepare-the-frontmatter">Add Disqus Comments to Docusaurus Blog Posts | Madrus's Webdings</a></li><li><a href="https://github.com/Chasen-Zhang/blog/blob/5d61d247e53071b399c81b3b7873023d4cb4ad76/src/theme/BlogPostPage/index.js">blog/index.js at 5d61d247e53071b399c81b3b7873023d4cb4ad76 · Chasen-Zhang/blog</a></li><li><a href="https://kdmw.dev/docusaurus/disqus-integration">Integrate with Disqus | kdmw</a></li><li><a href="https://github.com/kkdm/kdmw/blob/main/src/theme/DocItem/index.js">kdmw/index.js at main · kkdm/kdmw</a></li></ul>]]></content:encoded>
            <category>docusaurus</category>
            <category>disqus</category>
            <category>gitalk</category>
            <category>blog</category>
        </item>
        <item>
            <title><![CDATA[2021年终总结]]></title>
            <link>https://brightzoe.top/blog/2021/12/27/year-end-summary-of-2021</link>
            <guid>https://brightzoe.top/blog/2021/12/27/year-end-summary-of-2021</guid>
            <pubDate>Mon, 27 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[缘起]]></description>
            <content:encoded><![CDATA[<h2 id="缘起">缘起</h2><p>今天是 2021 年 12 月 27 号，离元旦没有几天了，往年是没有写年终总结之类的习惯的。</p><p>但由于有空回去逛一些其他人的个人博客，经常会翻到其他人写的年终总结类似的文章。另外，加上最近经常登陆掘金，掘金正在举办关于写年终总结的活动，这两周看过的年终总结属实有点多。</p><p>迫于上述外力的影响，加上一段时间过后，总结一下自己的生活，工作学习等是很有必要的。</p><p>在这里写的总结主要是写给自己看，不是什么工作需要，工作任务之类的东西。当几年过去后，再去翻到之前写的日记或总结会有什么样的感受？（虽然在初高中偶尔也写日记，但更多是情感上的发泄，回过头看，自己当时是有些幼稚和年轻呢 🎈</p><h2 id="工作相关">工作相关</h2><p>从 2020 年转行成为一名前端工程师，在这个职位上已经一年多了，在目前的这家公司也做了一年零几天，已经完全适应了自己在工作中的角色，以及每天的工作内容变化。</p><p>其中的工作角色，工作内容，较我之前从事的职位还是有很大变化的。过去的工作中，每天都需要应对好多人的事情，无时无刻被打断，需要去服务内外部的同事，对自己的精力出现了严重的透支。</p><p>刚进入这份工作的角色时，还是很开心的，每天工作的时候被人打搅的少了，可以有更多的时间思考，完成手上的任务，舒适度还是 ok 的。</p><p>回顾整体的工作节奏，在前半年还是相对轻松，节奏不那么紧张的。</p><p>而到了年中之后，我们所在团队的领导离职了，我所在的组大家都越来越忙。在迭代完一个版本的产品后。被借调到其他的组帮忙，一帮就帮了好几个月，同时公司的氛围仿佛变成了“战斗状态”，为了一个大版本的迭代，手里的任务很重。10 月，结束了公司最重要产品的版本发布，马上投入到了新成立的一个产品的开发，一段时间算是做产品，一段时间算是做项目。第一次了解到在这里做产品和做项目的开发不同是在哪里，做项目不需要考虑代码的通用性，设计的通用性，量身定制即可，只要后期能够维护。而做产品才需要考虑对于对于各种不同的场景，如何设计。</p><p>从一个没有实际前端工作经验的前端工程师，在这份工作前，是有很大一部分的忐忑，担心自己不能胜任甚至被辞退。一年过去了，在前端工程师这个角色上，已经不在担心自己有可能无法胜任，在很多方面发现自己并不是最菜的，有很多地方也是有闪光的，有自己对于代码的要求，对于完成任务的责任心。</p><h2 id="技术相关">技术相关</h2><p>在前端的开发过程中，自己感受平时的工作中缺少的部分：</p><ul><li><p>前端设计</p><p>在接到一份新的需求时，研究完需求进行一个完整的前端详细设计还是很有必要的。2022.01，最近正好接到新的需求，在尝试写设计文档，深感写设计文档也不是容易的事情，写好了能够避免后期在开发的时候遇到的问题的，提前沟通。但是目前开发时间很紧张，一个大功能，只有一周的时间，同时还需要去和后端沟通接口是否有问题，是否缺少。UI 稿是否完备，是否与需求完全一致，进行技术方案的设计还是缺少很多前置条件。</p><p>是否要做，以及是否能做前端设计，对于任务的要求是比较高的。产品需求需要详细，各种可能的操作需要在需求设计的时候就考虑到。同时开发排期不要太紧张，不然都是拿起来就干，哪里有时间先进行设计再开发。进行比较完整的前端设计是需要不少时间的。</p><p>学习政采云的前端设计文章：<a href="https://juejin.cn/post/7041713124210114567">在政采云如何写前端技术方案文档 - 掘金</a></p></li><li><p>对于做的功能的测试用例</p></li></ul><h2 id="生活相关">生活相关</h2><p><strong>日常生活</strong></p><p>每天的生活节奏大概是这样的。</p><p>工作日：</p><p>8:45 起床，上班。</p><p>9:30 - 19:00 努力工作。</p><p>19:30 - 21:00 晚饭时间。</p><p>21:00 - 睡前 农药/洗衣服/刷手机/学习。</p><p>休息日：</p><p>11:00 起床，做饭，吃饭。</p><ul><li>不加班的情况：</li></ul><p>13:00 农药/学习。</p><p>16:00 午睡。</p><p>19:30 晚饭时间。</p><ul><li>加班的情况：</li></ul><p>13:00-21:00 工作。</p><p>21:00-22:30 学习。</p><p>23:00 睡觉。</p><p><strong>个人成长</strong></p><p>从前端相关的技术上：</p><p>在工作中，工作上的业务还是很忙碌的，每天排的满满当当，而且大部分情况下都是直接开干，缺少一定的规划和设计。</p><p>工作之外，今年花了很多时间在掘金社区上，有时会去看文章进行学习，有时会刷刷沸点摸鱼。</p><p>其他的方面：</p><p>有空会在微信读书上看看书，虽然可能还是三天打鱼两天晒网，但整体还是有一定的阅读量。 读书的内容包括上面技术相关，也包含一些心理认知，哲学书籍。</p><h2 id="情感相关">情感相关</h2><p>与父母的联系基本是每周一次视频，不算太密切，也不算太疏远，与之前的频率差不太多。每年回家大概两次，时间还是比较短，没什么大的冲突，但自己遇到的一些问题，或者一些想法，会分情况考虑是否要讲。思维角度上的问题，有很多是没办法沟通的，这一点上也没有什么解决方案。</p><p>关于在个人情感上，与去年一样，还是一个单身狗。间歇性积极营业，大部分时间习惯了单身。有过一些波折，有过在聊的，在发展中的对象，但并没有形成稳定的关系就拜拜了。</p><h2 id="展望">展望</h2><p>有总结，当然也要有规划。</p><p>给 2022 年制定几个小目标，希望能够有更多的进步。</p><ol><li><p>多读书。全年目标微信读书一年能够有 300 小时，加上之前累计的部分，共计约 850 小时。争取每天能有一小时的阅读时间。</p><p>2022 年好好读一下亲密关系这本书，在和父母，和朋友的交往上，自己都是处于比较疏离的状态，并没有很亲密的情感连接，需要好好学习，实践如何建立亲密关系。</p></li><li><p>少玩一些王者荣耀。一年的场次，希望可以控制在 500 场以内。</p></li><li><p>多运动。 这一点在 2021 的计划中也有，7 月还立了一个半年的减肥 flag 但并未成功，同志仍需努力。</p><p>大计划：在 2022 年清明节之前，瘦 10 斤，清明节之后不能超过瘦 10 斤后的体重。</p><p>小计划：2022.02.28 之前瘦 5 斤。健身卡 4 月底到期，到期前充分利用，每周至少去健身房两次。</p></li><li><p>技术上，除了工作中的应用，之外的学习还是不够。</p><p>希望能够在各种社区上有一定的输出。练习输出，先定个小目标，2022 年在掘金有 8 篇输出文章。不需要过多纠结文章的质量，只要求自己是认真实践或者认真总结的文章即可。</p></li></ol>]]></content:encoded>
            <category>diary</category>
            <category>thought</category>
        </item>
        <item>
            <title><![CDATA[学习 The Little Schemer]]></title>
            <link>https://brightzoe.top/blog/2021/11/05/the-little-schemer</link>
            <guid>https://brightzoe.top/blog/2021/11/05/the-little-schemer</guid>
            <pubDate>Fri, 05 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[环境配置使用 VS Code 编写 scheme ,参考: Windows + VS Code 搭建 Scheme 开发环境 - 知乎]]></description>
            <content:encoded><![CDATA[<p>环境配置使用 VS Code 编写 scheme ,参考: <a href="https://zhuanlan.zhihu.com/p/405246479">Windows + VS Code 搭建 Scheme 开发环境 - 知乎</a></p><h2 id="基本语法">基本语法</h2><p><code>atom</code>: 元子 <code>atom</code></p><p><code>list</code>: 列表 <code>(atom ss)</code> <code>()</code></p><p><code>car</code>: list 里的第一个 元素 <code>(car l)</code></p><blockquote><p>The primitive car is definedonly for non-empty lists.</p></blockquote><blockquote><p>( car l) is another way to ask for "the car of the list l."</p></blockquote><p><code>cdr</code>: list 去掉 car 后的 新 list <code>cdr l</code></p><blockquote><p>( cdr l) is just another way to ask for "the cdr of the list l."</p></blockquote><p><code>car</code>: <code>cdr</code>都是针对非空 <code>list</code>,不能用于<code>atom</code>,空<code>list</code></p><p><code>cons</code>: 把 一个 Scheme expression 添加为<code>list</code>的第一个元素. <code>(cons a l)</code> 第二个参数一定是<code>list</code>.</p><p><code>(null? l)</code>: 是空<code>list</code>吗? <code>(quote ())</code>表示一个空 list,null list. <code> ( null? (quote ()))</code> =&gt; true</p><p><code>( atom? s )</code> 是<code>atom</code>吗?</p><p><code>( eq? a1 a2)</code> 这两个<code>atom</code>相等吗? Eq takes two arguments. Both of them must be non-numeric atoms.</p><p>----------------第一章 end <code>(lat? l)</code> 是全为<code>atom</code>的<code>list</code>吗? Every lat is a list of atoms.</p>]]></content:encoded>
            <category>reading</category>
            <category>dev</category>
            <category>fp</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://brightzoe.top/blog/welcome</link>
            <guid>https://brightzoe.top/blog/welcome</guid>
            <pubDate>Thu, 09 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[About]]></description>
            <content:encoded><![CDATA[<h2 id="about">About</h2><p>你好，这里是我的 blog，或者可以说是我的 wiki 文档。</p><p>本博客使用 <code>docusaurus</code> 搭建，想要进一步了解请参阅官方文档 <a href="https://docusaurus.io/docs">Docusaurus docs</a></p><p>前期使用<code>docsify</code> 作为文档网站，2021.09 迁移至<code>docusaurus</code>。 <a href="https://docsify.js.org/#/zh-cn/">Docsify docs</a></p><p>欢迎来到这里，如果对你有些帮助，我会很开心。有任何想说的或建议都欢迎留言。</p><admonition type="info"><p>本 blog 中技术相关的文档，有参考来自网络的很多内容，包括来自 StackOverFlow, 掘金，思否，微信公众号，知乎等等。我在撰写文章，参考一些优秀内容时会记得添加到 References 注明出处, 若有疏漏，或者不小心侵权了，请放心联系我，尊重所有人的版权。</p></admonition><h2 id="site-content">Site Content</h2><p>截至目前，本 blog 的技术相关文档还是以笔记为主，记录本人在技术学习过程中对参考资料的整理，以及练习某些技术的总结。</p><p>以后在整理文档时，会在相关内容处直接放上参考，来源链接，并同时把链接放到最后‘Reference’处，方便使用。</p><blockquote><p>近期阅读参考‘掘金’比较多。 2021-10</p></blockquote><h2 id="how-to-use-docusaurus">How to use docusaurus</h2><p>以下为个人使用 docusaurus 的 doc 参考，更多请直接参考官方文档。</p><h3 id="docusaurus-blogging-features">Docusaurus blogging features</h3><p><a href="https://docusaurus.io/docs/blog">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img alt="Docusaurus Plushie" src="/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500"></p><p>The blog supports tags as well!</p><p>Use a <code>&lt;!--truncate--&gt;</code> comment to limit blog post size in the list view.</p><admonition type="note"><p>Some <strong>content</strong> with <em>markdown</em> <code>syntax</code>.</p></admonition><admonition type="info"><p>Some <strong>content</strong> with <em>markdown</em> <code>syntax</code>.</p></admonition><admonition type="caution"><p>Some <strong>content</strong> with <em>markdown</em> <code>syntax</code>.</p></admonition><admonition type="danger"><p>Some <strong>content</strong> with <em>markdown</em> <code>syntax</code>.</p></admonition><p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/">MDX</a>.</p><admonition type="tip"><mdxadmonitiontitle>Use the power of React to create interactive blog posts. <button>Click me!</button> :::</mdxadmonitiontitle><h3 id="using-interactive-code-editor">Using Interactive code editor</h3><pre><code class="language-jsx" metastring="live">function Clock(props) {
  const [date, setDate] = useState(new Date());
  useEffect(() =&gt; {
    var timerID = setInterval(() =&gt; tick(), 1000);

    return function cleanup() {
      clearInterval(timerID);
    };
  });

  function tick() {
    setDate(new Date());
  }

  return (
    &lt;div&gt;
      &lt;h2&gt;It is {date.toLocaleTimeString()}.&lt;/h2&gt;
    &lt;/div&gt;
  );
}
</code></pre><h3 id="using-sandpack">Using sandpack</h3><ul><li><a href="https://sandpack.codesandbox.io/docs/getting-started/custom-content">Custom Content | Sandpack</a></li></ul><div class="light sp-c-fVPbOs sp-c-fVPbOs-gMQIch-variant-light sp-wrapper"><div class="sp-c-ikJbEZ sp-layout"><div class="sp-c-euXojQ sp-editor sp-stack" style="flex-grow:50;flex-shrink:50;flex-basis:0;overflow:hidden"><div class="sp-c-gtcpyq sp-code-editor"><div aria-autocomplete="list" aria-label="Code Editor for App.js" aria-multiline="true" class="sp-pristine sp-javascript sp-c-jOWzsE sp-c-jkvvao sp-cm" role="textbox" tabindex="0" translate="no"><pre class="sp-c-fWymNx sp-pre-placeholder" style="margin-left:var(--sp-space-5)"><span class="sp-syntax-keyword">export</span> <span class="sp-syntax-keyword">default</span> <span class="sp-syntax-keyword">function</span> <span class="sp-syntax-definition">App</span><span class="sp-syntax-punctuation">(</span><span class="sp-syntax-punctuation">)</span> <span class="sp-syntax-punctuation">{</span>
  <span class="sp-syntax-keyword">return</span> <span class="sp-syntax-punctuation">&lt;</span><span class="sp-syntax-tag">h1</span><span class="sp-syntax-punctuation">&gt;</span>Hello world<span class="sp-syntax-punctuation">&lt;/</span><span class="sp-syntax-tag">h1</span><span class="sp-syntax-punctuation">&gt;</span>
<span class="sp-syntax-punctuation">}</span>

</pre></div></div></div><div class="sp-c-gvjhpQ sp-c-gvjhpQ-xpXQZ-direction-horizontal sp-resize-handler" data-direction="horizontal" style="left:calc(50% - 5px)"></div><div class="sp-c-euXojQ sp-preview sp-stack" style="flex-grow:50;flex-shrink:50;flex-basis:0;width:50%;gap:0"><div class="sp-c-juMdfR sp-preview-container"><iframe class="sp-c-fgviib sp-preview-iframe" title="Sandpack Preview"></iframe><div class="sp-c-kwibBT sp-preview-actions"><a href="https://codesandbox.io/api/v1/sandboxes/define?undefined&amp;environment=create-react-app" rel="noreferrer noopener" target="_blank" title="Open in CodeSandbox" class="sp-icon-standalone sp-c-bxeRRt sp-c-gMfcns sp-c-dEbKhQ sp-button"><svg fill="none" height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg" stroke="currentColor"><title>Open on CodeSandbox</title><path d="M6.66665 3.33337H4.33331C3.78103 3.33337 3.33331 3.78109 3.33331 4.33337V11.6667C3.33331 12.219 3.78103 12.6667 4.33331 12.6667H11.6666C12.2189 12.6667 12.6666 12.219 12.6666 11.6667V9.33337" stroke-linecap="round"></path><path d="M10 3.33337H12.5667C12.6219 3.33337 12.6667 3.37815 12.6667 3.43337V6.00004" stroke-linecap="round"></path><path d="M7.33331 8.66668L12.5333 3.46667" stroke-linecap="round"></path></svg><span>Open Sandbox</span></a></div></div></div></div></div><h2 id="changelog">ChangeLog</h2><ol><li><p>2021.10 添加@codesandbox/sand-pack，直接在 md 文档里放可以运行预览的代码,自定义文件内容不是詪好用，待研究。</p></li><li><p>2022.01 添加<code>lxgw-wenkai-screen</code>字体。字体文件较大，使用 github <a href="https://github.com/chawyehsu/lxgw-wenkai-webfont">chawyehsu/lxgw-wenkai-webfont: webfont package for the LXGW WenKai typeface</a> 的 node 包，优化加载。</p></li><li><p>2022.06 添加 disqus 评论插件。在 blog 部分默认开启，doc 部分关闭，可以通过<code>disqus: true</code>来开启某篇文档的评论。</p></li><li><p>2023.05 添加 ts 支持，由 yarn 切换至 pnpm。</p><p>依赖升级至 react18, 遇到 react 版本不兼容的问题，添加了<code>.npmrc</code>文件解决。 <a href="https://github.com/facebook/docusaurus/issues/7264">Migrate to React 18 · Issue #7264 · facebook/docusaurus</a></p></li></ol><h2 id="reference">Reference</h2><ul><li><a href="https://docusaurus.io/docs">Docusaurus docs</a></li><li><a href="https://docusaurus.io/docs/markdown-features/code-blocks#interactive-code-editor">Code blocks | Docusaurus</a></li></ul></admonition>]]></content:encoded>
            <category>about</category>
            <category>docusaurus</category>
        </item>
    </channel>
</rss>